#include <iostream>

using namespace std;

// KHAI BAO CAU TRUC LINK LIST
struct Node {
	int data;
	Node* next;
};

// TAO LINK LIST RONG
void init(Node* &head) {
	head = NULL;
}

// KIEM TRA DANH SACH RONG
bool isEmpty(Node* head) {
	if (head==NULL)
	{
		return true;
	}
	else
	{
		return false;
	}
}

// XOA DU LIEU
void free(Node* &head) {
	while (head != NULL)
	{
		Node* temp = head;
		head = head->next;
		delete temp;
	}
	head = NULL;
}

//TAO NODE MOI 
Node* createNode(int x) {
	Node* p = new Node;
	p->data = x;
	p->next = NULL;
	return p;
}

//THEM DAU
void addFirst(Node* &head, int val) {
	Node* p = createNode(val);
	p->next = head;
	head = p;
}

//THEM CUOI
void addLast(Node*& head, int val) {
	Node* p = createNode(val);
	if (!isEmpty(head))
	{
		Node* temp = head;
		while (temp->next != NULL)
		{
			temp = temp->next;
		}
		temp->next = p;
	}
	else
	{
		head = p;
	}
}

//THEM n PHAN TU
void add(Node*& head, int &n, int& val) {
	cout << "Nhap so luong phan tu: ";
	cin >> n;
	for (int i = 0; i < n; i++)
	{
		cout << "Nhap gia tri cua phan tu thu "<<i<<":";
		cin >> val;
		addLast(head, val);
	}
}


// XUAT
void output(Node* head) {
	if (isEmpty(head))
	{
		cout << "Danh sach rong.\n";
	}
	else
	{
		Node* flag = head;
		while (flag != NULL)
		{
			cout << flag->data << "\t";
			flag = flag->next;
		}
		cout << endl;

	}
}

//SAP XEP
void selectionSort(Node* head) {
	for (Node* i = head; i->next != NULL; i=i->next)
	{
		Node* min_Node = i;
		for (Node* j = i->next; j != NULL; j=j->next)
		{
			if (j->data < min_Node->data)
			{
				min_Node = j;
			}
		}
		swap(min_Node->data, i->data);
	}
}

void interchangeSort(Node* head) {
	for (Node* i = head; i->next != NULL; i=i->next)
	{
		for (Node* j = i->next; j != NULL; j=j->next)
		{
			if (j->data<i->data)
			{
				swap(j->data, i->data);
			}
		}
	}
}



Node* merge(Node* a, Node* b) {
	// BASE CASE
	if (a == NULL)
	{
		return b;
	}
	if (b == NULL)
	{
		return a;
	}

	//REC CASE
	Node* c;
	if (a->data < b->data)
	{
		c = a;
		c->next = merge(a->next, b);
	}
	else
	{
		c = b;
		c->next = merge(a, b->next);
	}
	return c;
}


Node* midPoint(Node* head) {
	Node* slow = head;
	Node* fast = head->next;
	while (fast != NULL && fast->next != NULL)
	{
		slow = slow->next;
		fast = fast->next->next;
	}
	return slow;
}



void mergeSort(Node*& head) {
	// BASE CASE
	if (head == NULL || head->next == NULL) {
		return;
	}

	// REC CASE
	Node* mid = midPoint(head);

	// BREAK AT THE MID
	Node* l = head;
	Node* m = mid->next;
	mid->next = NULL;

	mergeSort(l);
	mergeSort(m);
	head = merge(l, m);
}

void menu() {
	int baitap;
	Node* head;
	int n, val;
	init(head);
	bool check = true, flag = false;
	do
	{
		cout << "\n=====================BAITAP=====================\n\n";
		cout << "1. Nhap va xuat cac phan tu cho danh sach.\n";
		cout << "2. Them phan tu vao cuoi danh sach.\n";
		cout << "3. Them phan tu vao dau danh sach.\n";
		cout << "4. Sap xep danh sach bang Selection Sort.\n";
		cout << "5. Sap xep danh sach bang Interchange Sort.\n";
		cout << "6. Sap xep danh sach bang Merge Sort.\n";
		cout << "Chon bai tap ban muon lam hoac nhap bat ki de thoat: ";
		cin >> baitap;
		cout << "================================================\n\n";
		switch (baitap)
		{
		case 1:
			free(head);
			add(head, n, val);
			output(head);
			flag = true;
			break;
		case 2:
			if (flag == true)
			{
				cout << "Nhap gia tri ban muon them vao: ";
				cin >> val;
				addLast(head, val);
				output(head);
			}
			else
			{
				cout << "Ban can tao phan tu cho danh sach truoc( thuc hien bai 1).\n";
			}
			break;
		case 3:
			if (flag == true)
			{
				cout << "Nhap gia tri ban muon them vao: ";
				cin >> val;
				addFirst(head, val);
				output(head);
			}
			else
			{
				cout << "Ban can tao phan tu cho danh sach truoc( thuc hien bai 1).\n";
			}
			break;
		case 4:
			if (flag == true)
			{
				selectionSort(head);
				output(head);
			}
			else
			{
				cout << "Ban can tao phan tu cho danh sach truoc( thuc hien bai 1).\n";
			}
			break;
		case 5:
			if (flag == true)
			{
				interchangeSort(head);
				output(head);
			}
			else
			{
				cout << "Ban can tao phan tu cho danh sach truoc( thuc hien bai 1).\n";
			}
			break;
		case 6:
			if (flag == true)
			{
				mergeSort(head);
				output(head);
			}
			else
			{
				cout << "Ban can tao phan tu cho danh sach truoc( thuc hien bai 1).\n";
			}
			break;
		default:
			check = false;
			break;
		}
	} while (check == true);
	
}


int main() {
	menu();
	return 0;
}



